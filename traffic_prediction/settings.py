# -*- coding: utf-8 -*-
"""
Django settings for traffic_prediction project.

Generated by 'django-admin startproject' using Django 1.8.4.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os, datetime
from base import origin_dir, read_origin_data_into_geo_point_list
from os.path import normpath,join

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'q45cyk&5!_(a$wv8ug)bmw-6=&0t4+22us-54c2q^fi=!htyib'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'bootstrap3',
    'visualize'
)

MIDDLEWARE_CLASSES = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
)

ROOT_URLCONF = 'traffic_prediction.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                "django.contrib.auth.context_processors.auth",
                "django.core.context_processors.debug",
                "django.core.context_processors.i18n",
                "django.core.context_processors.media",
                'django.core.context_processors.static',
                'django.core.context_processors.tz',
                "django.contrib.messages.context_processors.messages",
                "django.core.context_processors.request"
            ],
        },
    },
]

WSGI_APPLICATION = 'traffic_prediction.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_CODE = 'zh-Hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = False



# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = normpath(join(BASE_DIR,  'static', 'root'))
STATICFILES_DIRS = (
    normpath(join(BASE_DIR, 'static')),
)

accident_fp = os.path.join(origin_dir, "accident_loc.tsv")
violation_fp = os.path.join(origin_dir, "violation_loc.tsv")
MAX_LINES = 7000
MINUTES_INTERVAL = datetime.timedelta(minutes=30)
TIME_PERIODS = {u'3天': 3, u'7天': 7, u'30天': 30}
DAYS_INTERVALS = [datetime.timedelta(days=val) for val in TIME_PERIODS.values()]
POINT_TYPE = "violation"
START_TIME = datetime.datetime.strptime("2016-05-04 18:00:00", "%Y-%m-%d %H:%M:%S")
END_TIME = datetime.datetime.strptime("2016-06-04 18:00:00", "%Y-%m-%d %H:%M:%S")

JSON_DIR = os.path.join(BASE_DIR, "static", "json")

TIME_SEGMENTS = {u'凌晨 0:00-7:00': 0, u'早高峰 7:00-9:00': 1, u'早工作 9:00-12:00': 2, u'中午 12:00-14:00': 3, u'下午 14:00-20:00': 4, u'晚间 20:00-24:00': 5}
accident_geo_points_list, accident_time_segment_list  = read_origin_data_into_geo_point_list(accident_fp, max_lines=MAX_LINES)
violation_geo_points_list, violation_time_segment_list  = read_origin_data_into_geo_point_list(violation_fp, max_lines=MAX_LINES)